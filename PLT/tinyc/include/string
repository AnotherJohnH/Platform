//------------------------------------------------------------------------------
// Copyright (c) 2013 John D. Haughton
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//------------------------------------------------------------------------------

//! \file string
//! \brief tiny C library implementation

#ifndef STRING_INCLUDED
#define STRING_INCLUDED

#include <cstddef>

namespace std {

//! TODO this is just a stub
class string
{
public:
   static const size_t npos = size_t(-1);

   using iterator = int;

   string() {}

   string(const char* s) {}

   string(const std::string& str) {}

   bool empty() const { return true; }

   size_t size() { return 0; }

   char operator[](size_t index) { return '\0'; }

   char back() const { return '\0'; }

   void pop_back() {}

   void push_back(char ch) {}

   char operator=(char ch)
   {
      return ch;
   }

   void operator+=(char ch)
   {
   }

   void operator+=(const char* ch)
   {
   }

   const char* c_str() const
   {
      return nullptr;
   }

   size_t find(char ch, size_t pos = 0) const
   {
      return npos;
   }

   iterator end()
   {
      return iterator();
   }

   void erase(iterator) {}

   bool operator==(const char*) { return false; }

   bool operator!=(const char*) { return true; }

   void operator+=(const std::string&) {}
};

} // namespace std

#endif
