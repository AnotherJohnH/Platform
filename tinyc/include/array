//------------------------------------------------------------------------------
// Copyright (c) 2013 John D. Haughton
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//------------------------------------------------------------------------------

//! \file array
//! \brief tiny C library implementation

#ifndef ARRAY
#define ARRAY

#include <cstddef>

namespace std {

//! TODO complete

template <typename TYPE, size_t N>
class array
{
public:
   using iterator       = TYPE*;
   using const_iterator = const TYPE*;

   // Capacity
   size_t size() const { return N; }
   size_t max_size() const { return N; }
   bool empty() const { return N != 0; }

   // Element access
   TYPE&       operator[](size_t index)       { return storage[index]; }
   const TYPE& operator[](size_t index) const { return storage[index]; }

   TYPE&       front()       { return storage[0]; }
   const TYPE& front() const { return storage[0]; }

   TYPE&       back()       { return storage[N-1]; }
   const TYPE& back() const { return storage[N-1]; }

   TYPE*       data()       { return storage; }
   const TYPE* data() const { return storage; }

   // Iterators
   iterator       begin()        { return storage; }
   const_iterator cbegin() const { return storage; }

   iterator       end()        { return storage + N; }
   const_iterator cend() const { return storage + N; }

   iterator       rbegin()        { return storage + N - 1; }
   const_iterator crbegin() const { return storage + N - 1; }

   iterator       rend()         { return storage - 1; }
   const_iterator crend() const  { return storage - 1; }

private:
   TYPE storage[N];
};

} // namespace std

#endif // ARRAY
