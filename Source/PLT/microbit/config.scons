#-------------------------------------------------------------------------------
#  Copyright (c) 2017 John D. Haughton
# 
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#-------------------------------------------------------------------------------

# scons configuration for micro bit builds

PREFIX  = 'arm-none-eabi-'
MC='armv6m'
CHIP='nRF51'

#-------------------------------------------------------------------------------

Import('env')

env['machine']    = MC
env['OBJPREFIX']  = 'obj/'+env['machine']+'/'
env['LIBPREFIX']  = 'lib/'+env['machine']+'/lib'
env['PROGPREFIX'] = 'bin/'+env['machine']+'/'

env['AS']        = PREFIX+'as'
env['CC']        = PREFIX+'gcc'
env['CXX']       = PREFIX+'g++'
env['LINK']      = PREFIX+'ld'
env['AR']        = PREFIX+'ar'
env['RANLIB']    = PREFIX+'ranlib'
env['OBJCOPY']   = PREFIX+'objcopy'
env['OBJDUMP']   = PREFIX+'objdump'
env['SIZE']      = PREFIX+'size'

env['ASFLAGS']   = ['-mcpu=cortex-m0']

env['CCFLAGS']   = ['-DNDEBUG',
                    '-DNCONSOLE',
                    '-mcpu=cortex-m0',
                    '-mthumb',
                    '-mfloat-abi=soft',
                    '-fno-common',
                    '-fno-builtin',
                    '-fmessage-length=0',
                    '-fno-default-inline',
                    '-fno-exceptions',
                    '-ffunction-sections',
                    '-fdata-sections']

env['CXXFLAGS']  = ['-std=c++11', '-fno-rtti', '-DNO_RTTI', '-DSMALL_MEMORY']

import os
p = os.popen(env['CC'] + ' -print-file-name=armv6-m')
gcc_lib = p.readline()
env['LIBPATH']   = Split(gcc_lib)

env.Append(LIBS = ['tinyc', 'gcc'])
env['LINKFLAGS'] = ['--static']

ram_size = os.environ.get('MICROBIT_RAM')
env['startup'] = env.Object('../../MTL/chip/'+CHIP+'/startup_'+ram_size+'.s')
env['script']  = env.File('../../MTL/chip/'+CHIP+'/script_'+ram_size+'.ld')
env['target'] += '_'+ram_size

Import('source')

source+=[env.File('../Stub/Audio.cpp'),
         env.File('../Stub/Event.cpp'),
         env.File('../Stub/Frame.cpp'),
         env.File('../Stub/Image.cpp'),
         env.File('../Stub/Bitmap.cpp'),
         env.File('../Stub/Midi.cpp'),
         env.File('../Stub/Sounder.cpp'),
         env.File('../Stub/File.cpp')]

#-------------------------------------------------------------------------------
# Adapt the Program() builder to generate a raw binary and some debug info

env['BUILDERS']['Program'].action += '$OBJCOPY -O ihex $TARGET ${TARGET}.hex; '+ \
                                     '$OBJDUMP -D $TARGET > ${TARGET}.dbg; '+ \
                                     '$SIZE $TARGET'

