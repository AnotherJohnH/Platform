#------------------------------------------------------------------------------
# Copyright (c) 2023 John D. Haughton
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#------------------------------------------------------------------------------
# pylint: disable=bad-indentation

""" Auto-generation of C++ tables """

import CxxFile

SCRIPT      = __file__.rsplit("/", maxsplit=1)[-1]
DESCRIPTION = f'Auto-generated by \"{SCRIPT}\"'

#-------------------------------------------------------------------------------

def unsigned_max(bits):
   """ Return the maximum unsigned integer that can be represented by the given number of bits """
   return (1 << bits) - 1

def signed_max(bits):
   """ Return the maximum signed integer that can be represented by the given number of bits """
   return unsigned_max(bits - 1)

#-------------------------------------------------------------------------------

def hex_fmt(bits):
   """ Format string for neat layout in the Table .cpp files """
   longest = f'{unsigned_max(bits):x}'
   return f'0{len(longest)}x'

def dec_fmt(bits):
   """ Format string for neat layout in the Table .cpp files """
   longest = f'{unsigned_max(bits):d}'
   return f'{len(longest)}d'

def signed_dec_fmt(bits):
   """ Format string for neat layout in the Table .cpp files """
   longest = f'-{signed_max(bits):d}'
   return f'{len(longest)}d'

#-------------------------------------------------------------------------------

def gen(name,
        func,
        typename,
        log2_size = None,
        size      = None,
        include   = "<cstdint>",
        fmt       = 'd'):
   """ Generate a lookup table for the given function """

   header      = 'Table_' + name + '.h'
   module      = 'Table_' + name + '.cpp'
   symbol      = 'table_' + name
   symbol_size = 'TABLE_' + name.upper() + '_SIZE'
   symbol_mask = 'TABLE_' + name.upper() + '_MASK'

   if log2_size:
      size = 1 << log2_size

#-------------------------------------------------------------------------------
# Write header

   f = CxxFile.CxxFile(header, DESCRIPTION)

   f.p(f'#include {include}')
   f.p()

   if log2_size:
      f.p(f'static const unsigned LOG2_{symbol_size} = {log2_size};')
      f.p(f'static const unsigned {symbol_size}      = 1 << LOG2_{symbol_size};')
      f.p(f'static const unsigned {symbol_mask}      = {symbol_size} - 1;')
   else:
      f.p(f'static const unsigned {symbol_size}      = {size};')

   f.p()
   f.p(f'extern const {typename} {symbol}[{symbol_size}];')

#-------------------------------------------------------------------------------
# Write module

   f = CxxFile.CxxFile(module, DESCRIPTION)

   f.p(f'#include "{header}"')
   f.p()
   f.p(f'const {typename} {symbol}[{symbol_size}] =')
   f.p('{', end = '')

   for i in range(0, size):

      x = i / (size - 1)
      y = func(i, x)

      if i % 8 == 0:
         f.p('\n  ', end = '')

      if fmt[-1] == 'x':
         f.p(f' 0x{y:>{fmt}},', end = '')
      else:
         f.p(f' {y:>{fmt}},', end = '')

   f.p('\n};')


#-------------------------------------------------------------------------------

class Constants:
   """ Class to help share Python constants with C++ """

   def __init__(self, globals_):
      self.list           = []
      self.caller_globals = globals_
      self.type_size      = 0
      self.name_size      = 0
      self.file           = CxxFile.CxxFile('Table_const.h', DESCRIPTION)

   def decl(self, name, value, ctype = 'unsigned'):
      """ Declare a constant """
      self.list.append((ctype, name, value))
      self.caller_globals[name] = value
      self.type_size = max(len(ctype), self.type_size)
      self.name_size = max(len(name),  self.name_size)

   def __del__(self):
      f = self.file
      f.p('#include <cstdint>')
      f.p()
      for ctype, name, value in self.list:
         f.p(f'static const {ctype:{self.type_size}} {name:{self.name_size}} = {value};')
