#------------------------------------------------------------------------------
# Copyright (c) 2023 John D. Haughton
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#------------------------------------------------------------------------------

import CxxFile

def gen(name,
        bits,
        func,
        log2_size = None,
        size      = None,
        typename  = None,
        include   = "<cstdint>",
        prefix    = '',
        fmt       = 'd'):

    script      = __file__.rsplit("/", maxsplit=1)[-1]
    description = f'Auto-generated by \"{script}\"'
    header      = 'Table_' + name + '.h'
    module      = 'Table_' + name + '.cpp'
    symbol      = 'table_' + name
    symbol_size = 'TABLE_' + name.upper() + '_SIZE'
    symbol_mask = 'TABLE_' + name.upper() + '_MASK'

    if log2_size:
        size = 1 << log2_size

    if not typename:
        typename = f'uint{bits}_t'

#-------------------------------------------------------------------------------
# Write header

    f = CxxFile.CxxFile(header, description)

    f.p(f'#include {include}')
    f.p()

    if log2_size:
        f.p(f'static const unsigned LOG2_{symbol_size} = {log2_size};')
        f.p(f'static const unsigned {symbol_size}      = 1 << LOG2_{symbol_size};')
        f.p(f'static const unsigned {symbol_mask}      = {symbol_size} - 1;')
    else:
        f.p(f'static const unsigned {symbol_size}      = {size};')

    f.p()
    f.p(f'extern const {typename} {symbol}[{symbol_size}];')

#-------------------------------------------------------------------------------
# Write module

    f = CxxFile.CxxFile(module, description)

    f.p(f'#include "{header}"')
    f.p()
    f.p(f'const {typename} {symbol}[{symbol_size}] =')
    f.p('{', end = '')

    for i in range(0, size):

        x = i / (size - 1)
        y = func(i, x)

        if i % 8 == 0:
            f.p('\n  ', end = '')

        f.p(f' {prefix}{y:>{fmt}},', end = '')

    f.p('\n};')
